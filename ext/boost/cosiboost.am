####################################################################################################
#
# Section: Building Boost libraries
#
# Build Boost libraries that we use and that are not header-only.
# Building them as part of our build reduces dependence on the build environment and ensures
# that they are built with the same flags as the code that uses them, preventing link-time issues.
#
####################################################################################################

BOOST_PROGRAM_OPTIONS_LIBS = $(builddir)/libprogopt.la
BOOST_REGEX_LIBS = $(builddir)/libcosiregex.la
BOOST_FILESYSTEM_LIBS = $(builddir)/libcosifilesystem.la
BOOST_SYSTEM_LIBS = $(builddir)/libcosisystem.la
BOOST_CHRONO_LIBS = $(builddir)/libcosichrono.la
BOOST_TIMER_LIBS = $(builddir)/libcositimer.la
BOOST_SERIALIZATION_LIBS = $(builddir)/libcosiserialization.la

lib_LTLIBRARIES += $(BOOST_PROGRAM_OPTIONS_LIBS) #$(BOOST_REGEX_LIBS) $(BOOST_FILESYSTEM_LIBS) $(BOOST_SYSTEM_LIBS) $(BOOST_CHRONO_LIBS) $(BOOST_TIMER_LIBS) $(BOOST_SERIALIZATION_LIBS)

BOOST_DIR=$(srcdir)/ext/boost

PO=$(BOOST_DIR)/libs/program_options/src
libprogopt_la_SOURCES = $(PO)/cmdline.cpp $(PO)/config_file.cpp $(PO)/convert.cpp $(PO)/options_description.cpp $(PO)/parsers.cpp $(PO)/positional_options.cpp $(PO)/split.cpp $(PO)/utf8_codecvt_facet.cpp $(PO)/value_semantic.cpp $(PO)/variables_map.cpp $(PO)/winmain.cpp

RE=$(BOOST_DIR)/libs/regex/src
libcosiregex_la_SOURCES = $(RE)/cpp_regex_traits.cpp $(RE)/cregex.cpp $(RE)/c_regex_traits.cpp $(RE)/fileiter.cpp $(RE)/icu.cpp \
	$(RE)/instances.cpp $(RE)/internals.hpp $(RE)/posix_api.cpp $(RE)/regex.cpp $(RE)/regex_debug.cpp $(RE)/regex_raw_buffer.cpp \
	$(RE)/regex_traits_defaults.cpp $(RE)/static_mutex.cpp $(RE)/usinstances.cpp $(RE)/w32_regex_traits.cpp $(RE)/wc_regex_traits.cpp \
	$(RE)/wide_posix_api.cpp $(RE)/winstances.cpp
libcosiregex_la_CXXFLAGS = $(AM_CXXFLAGS) -Wno-strict-overflow

FS=$(BOOST_DIR)/libs/filesystem/src
SY=$(BOOST_DIR)/libs/system/src
libcosifilesystem_la_SOURCES = $(FS)/codecvt_error_category.cpp $(FS)/operations.cpp $(FS)/path.cpp $(FS)/path_traits.cpp $(FS)/portability.cpp $(FS)/unique_path.cpp $(FS)/utf8_codecvt_facet.cpp $(FS)/windows_file_codecvt.cpp $(SY)/error_code.cpp
libcosifilesystem_la_CPPFLAGS=$(AM_CPPFLAGS)

libcosisystem_la_SOURCES = $(SY)/error_code.cpp $(SY)/local_free_on_destruction.hpp
libcosisystem_la_CPPFLAGS=$(AM_CPPFLAGS)

CR=$(BOOST_DIR)/libs/chrono/src
libcosichrono_la_SOURCES = $(CR)/chrono.cpp $(CR)/process_cpu_clocks.cpp $(CR)/thread_clock.cpp
libcosichrono_la_CPPFLAGS = $(AM_CPPFLAGS)
#libcosichrono_la_LDFLAGS = -lrt

TI=$(BOOST_DIR)/libs/timer/src
libcositimer_la_SOURCES = $(TI)/auto_timers_construction.cpp $(TI)/cpu_timer.cpp
libcositimer_la_CPPFLAGS = $(AM_CPPFLAGS)
libcositimer_la_LIBADD = $(BOOST_CHRONO_LIBS)

SR=$(BOOST_DIR)/libs/serialization/src
libcosiserialization_la_SOURCES = $(SR)/archive_exception.cpp $(SR)/basic_archive.cpp $(SR)/basic_iarchive.cpp $(SR)/basic_iserializer.cpp $(SR)/basic_oarchive.cpp $(SR)/basic_oserializer.cpp \
 $(SR)/basic_pointer_iserializer.cpp $(SR)/basic_pointer_oserializer.cpp $(SR)/basic_serializer_map.cpp $(SR)/basic_text_iprimitive.cpp $(SR)/basic_text_oprimitive.cpp \
 $(SR)/basic_text_wiprimitive.cpp $(SR)/basic_text_woprimitive.cpp $(SR)/basic_xml_archive.cpp $(SR)/binary_iarchive.cpp $(SR)/binary_oarchive.cpp \
 $(SR)/binary_wiarchive.cpp $(SR)/binary_woarchive.cpp $(SR)/codecvt_null.cpp $(SR)/extended_type_info.cpp $(SR)/extended_type_info_no_rtti.cpp $(SR)/extended_type_info_typeid.cpp \
 $(SR)/polymorphic_iarchive.cpp $(SR)/polymorphic_oarchive.cpp $(SR)/shared_ptr_helper.cpp $(SR)/stl_port.cpp $(SR)/text_iarchive.cpp $(SR)/text_oarchive.cpp $(SR)/text_wiarchive.cpp \
 $(SR)/text_woarchive.cpp $(SR)/utf8_codecvt_facet.cpp $(SR)/void_cast.cpp $(SR)/xml_archive_exception.cpp $(SR)/xml_grammar.cpp $(SR)/xml_iarchive.cpp $(SR)/xml_oarchive.cpp \
 $(SR)/xml_wgrammar.cpp $(SR)/xml_wiarchive.cpp $(SR)/xml_woarchive.cpp
libcosiserialization_la_CPPFLAGS = $(AM_CPPFLAGS)

################################################
# End section: Building Boost libraries
################################################
